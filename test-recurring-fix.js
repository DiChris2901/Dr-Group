// üß™ Script de prueba para verificar la correcci√≥n de compromisos recurrentes
// Este script simula la creaci√≥n de compromisos recurrentes con los datos corregidos

console.log('üß™ INICIANDO PRUEBAS DE CORRECCI√ìN DE COMPROMISOS RECURRENTES');
console.log('='.repeat(60));

// Simular datos de prueba que representan el problema anterior
const testCases = [
  {
    name: 'Caso 1: Datos completos (deber√≠a funcionar)',
    commitmentData: {
      concept: 'Salario',
      companyId: 'company123',
      companyName: 'DR Group S.A.S.', // ‚úÖ Presente
      beneficiary: 'Kerly Mauricio Ca√±√≥n Uneme',
      beneficiaryNit: '1234567890',
      totalAmount: 1509620,
      dueDate: new Date('2025-09-29'),
      periodicity: 'monthly',
      recurringCount: 4
    }
  },
  {
    name: 'Caso 2: Datos sin companyName (problema anterior - deber√≠a fallar)',
    commitmentData: {
      concept: 'Bonificaci√≥n',
      companyId: 'company456',
      // companyName: undefined, // ‚ùå Faltante (problema anterior)
      beneficiary: 'Carolina Rios',
      beneficiaryNit: '0987654321',
      totalAmount: 353443,
      dueDate: new Date('2025-10-29'),
      periodicity: 'monthly',
      recurringCount: 4
    }
  },
  {
    name: 'Caso 3: companyName vac√≠o (problema anterior - deber√≠a fallar)',
    commitmentData: {
      concept: 'Otra Obligaci√≥n',
      companyId: 'company789',
      companyName: '', // ‚ùå Vac√≠o (problema anterior)
      beneficiary: 'Proveedor Ejemplo',
      beneficiaryNit: '1122334455',
      totalAmount: 500000,
      dueDate: new Date('2025-11-29'),
      periodicity: 'monthly',
      recurringCount: 3
    }
  }
];

// Funci√≥n para simular generateRecurringCommitments (versi√≥n corregida)
const simulateGenerateRecurringCommitments = (commitmentData, instancesCount = 12, skipFirst = false) => {
  console.log(`üìã Simulando generaci√≥n para: ${commitmentData.concept}`);
  
  try {
    // ‚úÖ VALIDACIONES CR√çTICAS (las que agregamos)
    if (!commitmentData) {
      throw new Error('commitmentData es requerido');
    }
    
    if (!commitmentData.concept || commitmentData.concept.trim() === '') {
      throw new Error('El concepto del compromiso es requerido');
    }
    
    if (!commitmentData.companyName || commitmentData.companyName.trim() === '') {
      console.error('‚ùå CRITICAL: companyName faltante en commitmentData');
      console.error('üìã Datos recibidos:', {
        companyId: commitmentData.companyId,
        companyName: commitmentData.companyName,
        concept: commitmentData.concept,
        beneficiary: commitmentData.beneficiary
      });
      throw new Error('companyName es requerido para evitar compromisos hu√©rfanos');
    }
    
    if (commitmentData.periodicity === 'unique') {
      return [commitmentData];
    }

    // Simular generaci√≥n de compromisos
    const generatedCommitments = [];
    const baseDate = new Date(commitmentData.dueDate);
    const startIndex = skipFirst ? 1 : 0;
    
    for (let i = startIndex; i < instancesCount + startIndex && i < commitmentData.recurringCount + startIndex; i++) {
      // Simular addMonths
      const currentDate = new Date(baseDate);
      currentDate.setMonth(currentDate.getMonth() + i);
      
      const commitment = {
        ...commitmentData,
        dueDate: currentDate,
        companyName: commitmentData.companyName, // ‚úÖ Expl√≠citamente asegurar
        instanceNumber: i + 1,
        isRecurring: true
      };

      // ‚úÖ VALIDACI√ìN FINAL ANTES DE AGREGAR
      if (!commitment.companyName || commitment.companyName.trim() === '') {
        throw new Error(`Compromiso ${i + 1} quedar√≠a sin companyName - cancelando generaci√≥n`);
      }

      generatedCommitments.push(commitment);
    }

    return generatedCommitments;
  } catch (error) {
    throw error;
  }
};

// Ejecutar pruebas
console.log('\nüß™ EJECUTANDO CASOS DE PRUEBA:\n');

testCases.forEach((testCase, index) => {
  console.log(`${index + 1}. ${testCase.name}`);
  console.log('-'.repeat(50));
  
  try {
    const result = simulateGenerateRecurringCommitments(
      testCase.commitmentData, 
      testCase.commitmentData.recurringCount || 12, 
      false
    );
    
    console.log(`‚úÖ √âXITO: Se generaron ${result.length} compromisos`);
    console.log(`üìã Primer compromiso:`, {
      concept: result[0].concept,
      companyName: result[0].companyName,
      beneficiary: result[0].beneficiary,
      dueDate: result[0].dueDate.toLocaleDateString()
    });
    
    // Verificar que ninguno tenga companyName vac√≠o
    const invalidCommitments = result.filter(c => !c.companyName || c.companyName.trim() === '');
    if (invalidCommitments.length > 0) {
      console.log(`‚ùå ADVERTENCIA: ${invalidCommitments.length} compromisos sin companyName detectados`);
    } else {
      console.log('‚úÖ Todos los compromisos tienen companyName v√°lido');
    }
    
  } catch (error) {
    console.log(`‚ùå ERROR (esperado para casos problem√°ticos): ${error.message}`);
  }
  
  console.log('');
});

// Resumen de la correcci√≥n
console.log('üìä RESUMEN DE LA CORRECCI√ìN IMPLEMENTADA:');
console.log('='.repeat(50));
console.log('‚úÖ NewCommitmentPage.jsx:');
console.log('   ‚Ä¢ Se agreg√≥ resoluci√≥n de companyName antes de crear compromisos recurrentes');
console.log('   ‚Ä¢ commitmentData ahora incluye expl√≠citamente companyName');
console.log('');
console.log('‚úÖ CommitmentEditFormComplete.jsx:');
console.log('   ‚Ä¢ Se agreg√≥ resoluci√≥n de companyName en updatedData');
console.log('   ‚Ä¢ Los compromisos recurrentes generados en edici√≥n tendr√°n companyName');
console.log('');
console.log('‚úÖ recurringCommitments.js:');
console.log('   ‚Ä¢ Se agregaron validaciones cr√≠ticas para prevenir compromisos hu√©rfanos');
console.log('   ‚Ä¢ generateRecurringCommitments valida companyName antes de generar');
console.log('   ‚Ä¢ saveRecurringCommitments valida todos los compromisos antes de guardar');
console.log('   ‚Ä¢ Se agreg√≥ logging detallado para debugging');
console.log('');
console.log('üéØ RESULTADO ESPERADO:');
console.log('   ‚Ä¢ No m√°s compromisos con "Sin empresa"');
console.log('   ‚Ä¢ Todos los compromisos recurrentes tendr√°n companyName v√°lido');
console.log('   ‚Ä¢ Errores claros si faltan datos cr√≠ticos');
console.log('   ‚Ä¢ Mejor debugging y monitoreo');

console.log('\n‚úÖ Pruebas completadas');
