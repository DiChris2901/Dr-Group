const twilio = require('twilio');

// Configuraci√≥n de Twilio
const TWILIO_ACCOUNT_SID = 'AC9d2313319dee6dcba99298003893c190';
const TWILIO_AUTH_TOKEN = '2025cd85312e59bf48af46786e73be64';

const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);

async function debugWhatsAppSenders() {
  console.log('üîç Verificando configuraci√≥n de WhatsApp...\n');
  
  try {
    // 1. Verificar n√∫meros de WhatsApp disponibles
    console.log('üì± N√∫meros de WhatsApp disponibles:');
    const phoneNumbers = await client.incomingPhoneNumbers.list();
    phoneNumbers.forEach(number => {
      console.log(`  - ${number.phoneNumber} (${number.friendlyName})`);
    });

    // 2. Verificar WhatsApp Senders espec√≠ficamente
    console.log('\nüìû WhatsApp Senders configurados:');
    try {
      const senders = await client.messaging.v1.services.list();
      console.log(`Total de servicios de messaging: ${senders.length}`);
      
      for (const service of senders) {
        console.log(`\nServicio: ${service.friendlyName} (${service.sid})`);
        try {
          const phoneNumbers = await client.messaging.v1.services(service.sid).phoneNumbers.list();
          phoneNumbers.forEach(phone => {
            console.log(`  üì± ${phone.phoneNumber} - Capacidades: ${phone.capabilities.join(', ')}`);
          });
        } catch (err) {
          console.log(`  ‚ö†Ô∏è No se pudieron obtener n√∫meros para este servicio`);
        }
      }
    } catch (err) {
      console.log('‚ö†Ô∏è No se pudieron obtener servicios de messaging');
    }

    // 3. Verificar estado espec√≠fico de WhatsApp Business
    console.log('\nüè¢ Estado de WhatsApp Business API:');
    try {
      // Intentar obtener informaci√≥n de WhatsApp Business
      const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${TWILIO_ACCOUNT_SID}/Messages.json`, {
        headers: {
          'Authorization': 'Basic ' + Buffer.from(`${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN}`).toString('base64')
        }
      });
      
      if (response.ok) {
        console.log('‚úÖ API de Twilio accesible');
      } else {
        console.log('‚ùå Problema con API de Twilio');
      }
    } catch (err) {
      console.log('‚ùå Error verificando API:', err.message);
    }

    // 4. Probar env√≠o de mensaje de prueba desde sandbox
    console.log('\nüß™ Probando env√≠o desde Sandbox:');
    try {
      const testMessage = await client.messages.create({
        from: 'whatsapp:+14155238886', // Sandbox
        to: 'whatsapp:+12312419541',   // Tu n√∫mero
        body: 'üß™ Mensaje de prueba desde Sandbox - ' + new Date().toLocaleTimeString()
      });
      console.log(`‚úÖ Mensaje de prueba enviado: ${testMessage.sid}`);
      console.log(`üìä Estado: ${testMessage.status}`);
    } catch (err) {
      console.log(`‚ùå Error enviando desde Sandbox: ${err.message}`);
    }

    // 5. Probar env√≠o desde tu n√∫mero personal
    console.log('\nüì± Probando env√≠o desde n√∫mero personal (+12312419541):');
    try {
      const testMessage = await client.messages.create({
        from: 'whatsapp:+12312419541', // Tu n√∫mero
        to: 'whatsapp:+12312419541',   // A ti mismo
        body: 'üì± Mensaje de prueba desde n√∫mero personal - ' + new Date().toLocaleTimeString()
      });
      console.log(`‚úÖ Mensaje personal enviado: ${testMessage.sid}`);
      console.log(`üìä Estado: ${testMessage.status}`);
    } catch (err) {
      console.log(`‚ùå Error enviando desde n√∫mero personal: ${err.message}`);
      console.log(`üîç Detalle del error:`, err);
    }

  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

// Ejecutar verificaci√≥n
debugWhatsAppSenders()
  .then(() => {
    console.log('\n‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Error ejecutando verificaci√≥n:', error);
    process.exit(1);
  });
