import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Box,
  Typography,
  CircularProgress,
  InputAdornment
} from '@mui/material';
import {
  Edit,
  Business,
  AccountBalance,
  CalendarToday,
  AttachMoney,
  Person,
  Notes,
  Payment
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import { format } from 'date-fns';
import { collection, query, orderBy, onSnapshot, doc, updateDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../../config/firebase';
import { useAuth } from '../../context/AuthContext';

const CommitmentEditForm = ({ 
  open, 
  onClose, 
  commitment, 
  onSaved 
}) => {
  const { currentUser } = useAuth();
  const [companies, setCompanies] = useState([]);
  const [saving, setSaving] = useState(false);
  
  // Estado del formulario
  const [formData, setFormData] = useState({
    concept: '',
    companyId: '',
    amount: '',
    dueDate: null,
    beneficiary: '',
    observations: '',
    paymentMethod: 'transfer'
  });

  // Cargar empresas
  useEffect(() => {
    if (!currentUser) return;

    const q = query(collection(db, 'companies'), orderBy('name', 'asc'));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const companiesData = [];
      snapshot.forEach((doc) => {
        companiesData.push({
          id: doc.id,
          ...doc.data()
        });
      });
      setCompanies(companiesData);
    });

    return () => unsubscribe();
  }, [currentUser]);

  // Llenar formulario cuando se abre
  useEffect(() => {
    if (commitment && open) {
      setFormData({
        concept: commitment.concept || commitment.description || '',
        companyId: commitment.companyId || '',
        amount: commitment.amount || '',
        dueDate: commitment.dueDate,
        beneficiary: commitment.beneficiary || '',
        observations: commitment.observations || '',
        paymentMethod: commitment.paymentMethod || 'transfer'
      });
    }
  }, [commitment, open]);

  const handleFormChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    if (!commitment || !formData.concept.trim() || !formData.amount) {
      return;
    }

    setSaving(true);
    try {
      const commitmentRef = doc(db, 'commitments', commitment.id);
      await updateDoc(commitmentRef, {
        concept: formData.concept.trim(),
        companyId: formData.companyId,
        amount: parseFloat(formData.amount),
        dueDate: formData.dueDate,
        beneficiary: formData.beneficiary.trim(),
        observations: formData.observations.trim(),
        paymentMethod: formData.paymentMethod,
        updatedAt: serverTimestamp(),
        updatedBy: currentUser.uid
      });

      onSaved?.();
      onClose();
    } catch (error) {
      console.error('Error updating commitment:', error);
    } finally {
      setSaving(false);
    }
  };

  const handleClose = () => {
    setFormData({
      concept: '',
      companyId: '',
      amount: '',
      dueDate: null,
      beneficiary: '',
      observations: '',
      paymentMethod: 'transfer'
    });
    onClose();
  };

  return (
    <AnimatePresence>
      {open && (
        <Dialog
          open={open}
          onClose={handleClose}
          maxWidth="md"
          fullWidth
          PaperProps={{
            component: motion.div,
            initial: { opacity: 0, scale: 0.9, y: 50 },
            animate: { opacity: 1, scale: 1, y: 0 },
            exit: { opacity: 0, scale: 0.95, y: 30 },
            transition: { duration: 0.4, type: "spring", stiffness: 100 },
            sx: {
              borderRadius: 4,
              backdropFilter: 'blur(25px) saturate(180%)',
              background: `
                linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%),
                radial-gradient(circle at 20% 20%, rgba(99, 102, 241, 0.05) 0%, transparent 50%)
              `,
              border: '1px solid rgba(255, 255, 255, 0.8)',
              boxShadow: `
                0 32px 64px rgba(0, 0, 0, 0.12),
                0 16px 32px rgba(0, 0, 0, 0.08),
                0 8px 16px rgba(0, 0, 0, 0.04),
                inset 0 1px 0 rgba(255, 255, 255, 0.6)
              `,
              position: 'relative',
              overflow: 'hidden',
              '&::before': {
                content: '""',
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: `
                  url("data:image/svg+xml,%3Csvg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="none" fill-rule="evenodd"%3E%3Cg fill="%23667eea" fill-opacity="0.03"%3E%3Cpath d="M20 20c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10zm10 0c0-5.5-4.5-10-10-10s-10 4.5-10 10 4.5 10 10 10 10-4.5 10-10z"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")
                `,
                opacity: 0.6,
                zIndex: 0
              }
            }
          }}
        >
          {/* Header con gradiente y animación */}
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            <Box
              sx={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                color: 'white',
                p: 3,
                borderRadius: '16px 16px 0 0',
                position: 'relative',
                overflow: 'hidden',
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: -50,
                  right: -50,
                  width: 150,
                  height: 150,
                  borderRadius: '50%',
                  background: 'radial-gradient(circle, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100%)',
                  zIndex: 0
                },
                '&::after': {
                  content: '""',
                  position: 'absolute',
                  bottom: -30,
                  left: -30,
                  width: 100,
                  height: 100,
                  borderRadius: '50%',
                  background: 'radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%)',
                  zIndex: 0
                }
              }}
            >
              <Box display="flex" alignItems="center" gap={2.5} sx={{ position: 'relative', zIndex: 1 }}>
                <motion.div
                  initial={{ scale: 0.8, rotate: -90 }}
                  animate={{ scale: 1, rotate: 0 }}
                  transition={{ delay: 0.3, duration: 0.6, type: "spring" }}
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <Box
                    sx={{
                      width: 56,
                      height: 56,
                      borderRadius: 3,
                      background: 'rgba(255, 255, 255, 0.2)',
                      backdropFilter: 'blur(15px)',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.2)',
                    }}
                  >
                    <Edit sx={{ fontSize: 28, color: 'white', filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))' }} />
                  </Box>
                </motion.div>
                
                <Box>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.4, duration: 0.5 }}
                  >
                    <Typography variant="h5" sx={{ fontWeight: 800, mb: 0.5, textShadow: '0 2px 8px rgba(0,0,0,0.2)' }}>
                      Editar Compromiso
                    </Typography>
                  </motion.div>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                  >
                    <Typography variant="body1" sx={{ opacity: 0.9, fontWeight: 500, textShadow: '0 1px 4px rgba(0,0,0,0.1)' }}>
                      Modifica los detalles del compromiso financiero
                    </Typography>
                  </motion.div>
                </Box>
              </Box>
            </Box>
          </motion.div>

          <DialogContent sx={{ p: 4, position: 'relative', zIndex: 1 }}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3, duration: 0.6 }}
            >
              <Grid container spacing={3}>
                {/* Concepto/Descripción */}
                <Grid item xs={12}>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.4, duration: 0.5 }}
                  >
                    <TextField
                      fullWidth
                      label="Concepto o Descripción"
                      value={formData.concept}
                      onChange={(e) => handleFormChange('concept', e.target.value)}
                      variant="outlined"
                      required
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <Notes sx={{ color: 'primary.main', fontSize: 20 }} />
                          </InputAdornment>
                        ),
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(99, 102, 241, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(99, 102, 241, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(99, 102, 241, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(99, 102, 241, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(99, 102, 241, 0.2)'
                          }
                        }
                      }}
                    />
                  </motion.div>
                </Grid>

                {/* Empresa y Monto */}
                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                  >
                    <FormControl fullWidth>
                      <InputLabel>Empresa</InputLabel>
                      <Select
                        value={formData.companyId}
                        onChange={(e) => handleFormChange('companyId', e.target.value)}
                        label="Empresa"
                        required
                        startAdornment={
                          <InputAdornment position="start">
                            <Business sx={{ color: 'primary.main', fontSize: 20, ml: 1 }} />
                          </InputAdornment>
                        }
                        sx={{
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(99, 102, 241, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(99, 102, 241, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(99, 102, 241, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(99, 102, 241, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(99, 102, 241, 0.2)'
                          }
                        }}
                      >
                        {companies.map((company) => (
                          <MenuItem key={company.id} value={company.id}>
                            <Box display="flex" alignItems="center">
                              <Business sx={{ mr: 1, fontSize: 16, color: 'text.secondary' }} />
                              {company.name}
                            </Box>
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </motion.div>
                </Grid>

                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.5, duration: 0.5 }}
                  >
                    <TextField
                      fullWidth
                      label="Monto"
                      type="number"
                      value={formData.amount}
                      onChange={(e) => handleFormChange('amount', e.target.value)}
                      variant="outlined"
                      required
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <AttachMoney sx={{ color: 'success.main', fontSize: 20 }} />
                          </InputAdornment>
                        ),
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(76, 175, 80, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(76, 175, 80, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(76, 175, 80, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(76, 175, 80, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(76, 175, 80, 0.2)'
                          }
                        }
                      }}
                    />
                  </motion.div>
                </Grid>

                {/* Fecha de Vencimiento y Método de Pago */}
                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.6, duration: 0.5 }}
                  >
                    <TextField
                      fullWidth
                      label="Fecha de Vencimiento"
                      type="date"
                      value={formData.dueDate ? format(formData.dueDate, 'yyyy-MM-dd') : ''}
                      onChange={(e) => handleFormChange('dueDate', new Date(e.target.value))}
                      variant="outlined"
                      required
                      InputLabelProps={{ shrink: true }}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <CalendarToday sx={{ color: 'warning.main', fontSize: 20 }} />
                          </InputAdornment>
                        ),
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(255, 152, 0, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(255, 152, 0, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(255, 152, 0, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(255, 152, 0, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(255, 152, 0, 0.2)'
                          }
                        }
                      }}
                    />
                  </motion.div>
                </Grid>

                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.6, duration: 0.5 }}
                  >
                    <FormControl fullWidth>
                      <InputLabel>Método de Pago</InputLabel>
                      <Select
                        value={formData.paymentMethod}
                        onChange={(e) => handleFormChange('paymentMethod', e.target.value)}
                        label="Método de Pago"
                        startAdornment={
                          <InputAdornment position="start">
                            <Payment sx={{ color: 'info.main', fontSize: 20, ml: 1 }} />
                          </InputAdornment>
                        }
                        sx={{
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(33, 150, 243, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(33, 150, 243, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(33, 150, 243, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(33, 150, 243, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(33, 150, 243, 0.2)'
                          }
                        }}
                      >
                        <MenuItem value="transfer">
                          <Box display="flex" alignItems="center">
                            <AccountBalance sx={{ mr: 1, fontSize: 16 }} />
                            Transferencia
                          </Box>
                        </MenuItem>
                        <MenuItem value="cash">
                          <Box display="flex" alignItems="center">
                            <AttachMoney sx={{ mr: 1, fontSize: 16 }} />
                            Efectivo
                          </Box>
                        </MenuItem>
                        <MenuItem value="check">
                          <Box display="flex" alignItems="center">
                            <Payment sx={{ mr: 1, fontSize: 16 }} />
                            Cheque
                          </Box>
                        </MenuItem>
                        <MenuItem value="card">
                          <Box display="flex" alignItems="center">
                            <Payment sx={{ mr: 1, fontSize: 16 }} />
                            Tarjeta
                          </Box>
                        </MenuItem>
                      </Select>
                    </FormControl>
                  </motion.div>
                </Grid>

                {/* Beneficiario y Observaciones */}
                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.7, duration: 0.5 }}
                  >
                    <TextField
                      fullWidth
                      label="Beneficiario"
                      value={formData.beneficiary}
                      onChange={(e) => handleFormChange('beneficiary', e.target.value)}
                      variant="outlined"
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <Person sx={{ color: 'secondary.main', fontSize: 20 }} />
                          </InputAdornment>
                        ),
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(156, 39, 176, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(156, 39, 176, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(156, 39, 176, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(156, 39, 176, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(156, 39, 176, 0.2)'
                          }
                        }
                      }}
                    />
                  </motion.div>
                </Grid>

                <Grid item xs={12} md={6}>
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.7, duration: 0.5 }}
                  >
                    <TextField
                      fullWidth
                      label="Observaciones"
                      value={formData.observations}
                      onChange={(e) => handleFormChange('observations', e.target.value)}
                      variant="outlined"
                      multiline
                      rows={2}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start" sx={{ alignSelf: 'flex-start', mt: 1 }}>
                            <Notes sx={{ color: 'text.secondary', fontSize: 20 }} />
                          </InputAdornment>
                        ),
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 3,
                          background: 'rgba(255, 255, 255, 0.8)',
                          backdropFilter: 'blur(10px)',
                          border: '1px solid rgba(158, 158, 158, 0.2)',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            border: '1px solid rgba(158, 158, 158, 0.4)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 4px 12px rgba(158, 158, 158, 0.15)'
                          },
                          '&.Mui-focused': {
                            border: '2px solid rgba(158, 158, 158, 0.6)',
                            background: 'rgba(255, 255, 255, 0.95)',
                            boxShadow: '0 8px 24px rgba(158, 158, 158, 0.2)'
                          }
                        }
                      }}
                    />
                  </motion.div>
                </Grid>
              </Grid>
            </motion.div>
          </DialogContent>

          {/* Footer con botones mejorados */}
          <DialogActions 
            sx={{ 
              p: 4, 
              pt: 2,
              background: `
                linear-gradient(135deg, rgba(248, 250, 252, 0.95) 0%, rgba(241, 245, 249, 0.9) 100%),
                linear-gradient(225deg, rgba(255, 255, 255, 0.8) 0%, rgba(248, 250, 252, 0.6) 100%)
              `,
              borderTop: '1px solid rgba(0, 0, 0, 0.08)',
              backdropFilter: 'blur(20px) saturate(180%)',
              position: 'relative',
              zIndex: 1,
              gap: 2,
              '&::before': {
                content: '""',
                position: 'absolute',
                top: 0,
                left: '50%',
                transform: 'translateX(-50%)',
                width: '60%',
                height: 1,
                background: 'linear-gradient(90deg, transparent 0%, rgba(0, 0, 0, 0.1) 50%, transparent 100%)'
              }
            }}
          >
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.8, duration: 0.4 }}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <Button
                onClick={handleClose}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 3.5,
                  textTransform: 'none',
                  fontWeight: 600,
                  fontSize: '0.95rem',
                  color: 'text.secondary',
                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                  '&:hover': {
                    bgcolor: 'rgba(0, 0, 0, 0.06)',
                    transform: 'translateY(-1px)',
                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
                  }
                }}
              >
                Cancelar
              </Button>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.9, duration: 0.4 }}
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <Button
                onClick={handleSave}
                variant="contained"
                disabled={saving || !formData.concept.trim() || !formData.amount}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 3.5,
                  textTransform: 'none',
                  fontWeight: 700,
                  fontSize: '0.95rem',
                  background: `
                    linear-gradient(135deg, #667eea 0%, #764ba2 100%),
                    radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2) 0%, transparent 60%)
                  `,
                  boxShadow: `
                    0 8px 25px rgba(102, 126, 234, 0.35),
                    0 3px 12px rgba(102, 126, 234, 0.25),
                    inset 0 1px 0 rgba(255, 255, 255, 0.2)
                  `,
                  position: 'relative',
                  overflow: 'hidden',
                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                  '&::before': {
                    content: '""',
                    position: 'absolute',
                    inset: 0,
                    background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 60%)',
                    opacity: 0,
                    transition: 'opacity 0.3s ease'
                  },
                  '&:hover:not(:disabled)': {
                    background: `
                      linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%),
                      radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.25) 0%, transparent 60%)
                    `,
                    boxShadow: `
                      0 12px 35px rgba(102, 126, 234, 0.45),
                      0 5px 20px rgba(102, 126, 234, 0.3),
                      inset 0 1px 0 rgba(255, 255, 255, 0.3)
                    `,
                    transform: 'translateY(-2px)',
                    '&::before': {
                      opacity: 1
                    }
                  },
                  '&:disabled': {
                    background: 'rgba(0, 0, 0, 0.12)',
                    color: 'rgba(0, 0, 0, 0.26)',
                    boxShadow: 'none'
                  }
                }}
              >
                {saving ? (
                  <>
                    <CircularProgress size={16} sx={{ mr: 1, color: 'white' }} />
                    Guardando...
                  </>
                ) : (
                  'Guardar Cambios'
                )}
              </Button>
            </motion.div>
          </DialogActions>
        </Dialog>
      )}
    </AnimatePresence>
  );
};

export default CommitmentEditForm;
