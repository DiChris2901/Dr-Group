import React, { useState } from 'react';
import {
  animationVariants,
  useThemeGradients,
  shimmerEffect
} from '../../utils/designSystem.js';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Box,
  Typography,
  Paper,
  InputAdornment,
  CircularProgress,
  Divider,
  IconButton,
  alpha
} from '@mui/material';
import {
  CheckCircle,
  AttachFile,
  Close,
  TrendingUp,
  AccountBalance,
  Receipt,
  AttachMoney
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import { useTheme } from '@mui/material/styles';
import { doc, updateDoc, serverTimestamp } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../../config/firebase';
import { useAuth } from '../../context/AuthContext';

const PaymentPopupPremium = ({ 
  open, 
  onClose, 
  commitment, 
  onPaymentConfirmed 
}) => {
  const { currentUser } = useAuth();
  const theme = useTheme();
  const gradients = useThemeGradients();

  const [saving, setSaving] = useState(false);
  const [paymentData, setPaymentData] = useState({
    interests: '',
    receiptFile: null
  });

  // Formatear moneda
  const formatCurrency = (value) => {
    if (!value) return '';
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0
    }).format(value);
  };

  // Formatear n√∫mero con puntos de miles (sin s√≠mbolo de moneda) - igual que CommitmentEditForm
  const formatNumber = (value) => {
    if (!value) return '';
    return new Intl.NumberFormat('es-CO').format(value);
  };

  // Limpiar formato para obtener solo n√∫meros - igual que CommitmentEditForm
  const parseNumber = (formattedValue) => {
    if (!formattedValue) return '';
    return formattedValue.toString().replace(/[^\d]/g, '');
  };

  // Calcular total
  const calculateTotal = () => {
    const baseAmount = parseFloat(commitment?.amount) || 0;
    const interests = parseFloat(paymentData.interests) || 0;
    return baseAmount + interests;
  };

  // Manejar cambio en el campo de intereses - igual que CommitmentEditForm
  const handleInterestsChange = (value) => {
    // Limpiar el valor de cualquier formato
    const cleanValue = parseNumber(value);
    
    // Actualizar el estado con el valor limpio
    handleInputChange('interests', cleanValue);
  };

  // Manejar cambios generales en el formulario
  const handleInputChange = (field, value) => {
    setPaymentData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Cerrar modal
  const handleClose = () => {
    if (!saving) {
      setPaymentData({ interests: '', receiptFile: null });
      onClose();
    }
  };

  // Confirmar pago
  const handleConfirmPayment = async () => {
    if (!commitment) return;
    
    try {
      setSaving(true);
      
      let receiptUrl = null;
      let receiptMetadata = null;
      
      // Subir archivo si existe
      if (paymentData.receiptFile) {
        console.log('üìé Subiendo comprobante:', paymentData.receiptFile.name);
        
        // Crear referencia con ruta que coincida con las reglas de seguridad
        const timestamp = Date.now();
        const fileExtension = paymentData.receiptFile.name.split('.').pop();
        const fileName = `${commitment.id}_${timestamp}.${fileExtension}`;
        const fileRef = ref(storage, `receipts/${currentUser.uid}/${fileName}`);
        
        // Subir archivo con metadata
        const metadata = {
          customMetadata: {
            'commitmentId': commitment.id,
            'uploadedBy': currentUser.uid,
            'originalName': paymentData.receiptFile.name,
            'uploadedAt': new Date().toISOString()
          }
        };
        
        const snapshot = await uploadBytes(fileRef, paymentData.receiptFile, metadata);
        receiptUrl = await getDownloadURL(snapshot.ref);
        
        receiptMetadata = {
          originalName: paymentData.receiptFile.name,
          size: paymentData.receiptFile.size,
          type: paymentData.receiptFile.type,
          storagePath: `receipts/${currentUser.uid}/${fileName}`
        };
        
        console.log('‚úÖ Comprobante subido exitosamente:', receiptUrl);
      }
      
      // Actualizar compromiso en Firestore
      const commitmentRef = doc(db, 'commitments', commitment.id);
      const updateData = {
        status: 'paid',
        paidAt: serverTimestamp(),
        paidBy: currentUser.uid,
        interests: parseFloat(paymentData.interests) || 0,
        totalPaid: calculateTotal(),
        updatedAt: serverTimestamp()
      };
      
      // Agregar datos del comprobante si existe
      if (receiptUrl) {
        updateData.receiptUrl = receiptUrl;
        updateData.receiptMetadata = receiptMetadata;
      }
      
      await updateDoc(commitmentRef, updateData);
      
      console.log('‚úÖ Pago procesado exitosamente');
      
      // Ejecutar callbacks
      onPaymentConfirmed && onPaymentConfirmed();
      
    } catch (error) {
      console.error('‚ùå Error al procesar pago:', error);
      
      // Mensaje de error m√°s espec√≠fico
      let errorMessage = '‚ùå Error al procesar el pago';
      if (error.code === 'storage/unauthorized') {
        errorMessage = '‚ùå Error: No tienes permisos para subir archivos';
      } else if (error.code === 'storage/canceled') {
        errorMessage = '‚ùå Error: Subida cancelada';
      } else if (error.code === 'storage/unknown') {
        errorMessage = '‚ùå Error desconocido al subir el archivo';
      }
      
      alert(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  if (!commitment) return null;

  return (
    <AnimatePresence>
      {open && (
        <Dialog
          open={open}
          onClose={handleClose}
          maxWidth="xs"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 3,
              overflow: 'hidden',
              backdropFilter: 'blur(20px)',
              background: gradients.paper,
              boxShadow: `0 20px 60px ${theme.palette.mode === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(0,0,0,0.15)'}`,
              border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
              ...shimmerEffect,
              maxWidth: '450px',
              margin: 'auto'
            }
          }}
        >
          <motion.div
            {...animationVariants.modalAppear}
            style={{ position: 'relative', zIndex: 2 }}
          >
            {/* Header Premium con Gradiente Din√°mico */}
            <DialogTitle
              sx={{
                background: gradients.primary,
                color: 'white',
                textAlign: 'center',
                py: 3,
                position: 'relative',
                overflow: 'hidden',
                '&::before': {
                  content: '""',
                  position: 'absolute',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  background: 'radial-gradient(circle at 30% 20%, rgba(255,255,255,0.15) 0%, transparent 50%)',
                  zIndex: 1
                },
                '&::after': {
                  content: '""',
                  position: 'absolute',
                  top: -50,
                  right: -50,
                  width: 120,
                  height: 120,
                  background: 'radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%)',
                  borderRadius: '50%',
                  zIndex: 1
                }
              }}
            >
              <Box sx={{ position: 'relative', zIndex: 2 }}>
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 0.2, type: "spring", bounce: 0.5 }}
                >
                  <CheckCircle sx={{ fontSize: 48, mb: 1, opacity: 0.9 }} />
                </motion.div>
                <Typography variant="h4" fontWeight={800} sx={{ mb: 1 }}>
                  Marcar como Pagado
                </Typography>
                <Typography variant="body1" sx={{ opacity: 0.9, maxWidth: 400, mx: 'auto' }}>
                  {commitment.concept}
                </Typography>
              </Box>

              {/* Bot√≥n de Cerrar Premium */}
              <IconButton
                onClick={handleClose}
                sx={{
                  position: 'absolute',
                  top: 16,
                  right: 16,
                  zIndex: 3,
                  color: 'rgba(255,255,255,0.8)',
                  '&:hover': {
                    color: 'white',
                    backgroundColor: 'rgba(255,255,255,0.1)',
                    transform: 'scale(1.1)'
                  }
                }}
              >
                <Close />
              </IconButton>
            </DialogTitle>

            <DialogContent sx={{ p: 3, pt: 2 }}>
              {/* Monto del Compromiso - Paper Premium */}
              <motion.div {...animationVariants.slideUp}>
                <Paper
                  elevation={0}
                  sx={{
                    background: `linear-gradient(135deg, ${theme.palette.info.main}15, ${theme.palette.info.light}10)`,
                    border: `1px solid ${theme.palette.info.main}30`,
                    borderRadius: 3,
                    p: 2.5,
                    mb: 3,
                    textAlign: 'center',
                    position: 'relative',
                    overflow: 'hidden',
                    ...shimmerEffect
                  }}
                >
                  <Box sx={{ position: 'relative', zIndex: 2 }}>
                    <Box display="flex" alignItems="center" justifyContent="center" gap={1} mb={1}>
                      <AccountBalance color="info" />
                      <Typography variant="body2" color="text.secondary" fontWeight={600}>
                        Monto del Compromiso
                      </Typography>
                    </Box>
                    <Typography 
                      variant="h3" 
                      color="info.main" 
                      fontWeight={800}
                      sx={{ 
                        fontFamily: 'monospace',
                        textShadow: `0 2px 4px ${theme.palette.info.main}20`
                      }}
                    >
                      {formatCurrency(commitment.amount)}
                    </Typography>
                  </Box>
                </Paper>
              </motion.div>

              {/* Campo de Intereses Premium */}
              <motion.div 
                {...animationVariants.slideUp}
                transition={{ delay: 0.1 }}
              >
                <Box mb={2.5}>
                  <Typography 
                    variant="h6" 
                    fontWeight={700} 
                    mb={2}
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1,
                      color: theme.palette.text.primary
                    }}
                  >
                    <TrendingUp color="warning" />
                    ¬øPagaste intereses adicionales?
                  </Typography>
                  
                  <TextField
                    fullWidth
                    type="text"
                    label="Intereses (opcional)"
                    value={paymentData.interests ? formatNumber(paymentData.interests) : ''}
                    onChange={(e) => handleInterestsChange(e.target.value)}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 3,
                        background: alpha(theme.palette.background.paper, 0.8),
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-1px)',
                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
                        },
                        '&.Mui-focused': {
                          boxShadow: `0 0 0 2px ${theme.palette.warning.main}40`
                        }
                      }
                    }}
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <AttachMoney color="warning" />
                        </InputAdornment>
                      ),
                      endAdornment: paymentData.interests && (
                        <InputAdornment position="end">
                          <CheckCircle color="success" fontSize="small" />
                        </InputAdornment>
                      )
                    }}
                    helperText="Ingresa cualquier inter√©s adicional que hayas pagado"
                  />
                </Box>
              </motion.div>

              {/* Total a Pagar - Paper Premium con Animaci√≥n */}
              <motion.div 
                {...animationVariants.slideUp}
                transition={{ delay: 0.2 }}
              >
                <Paper
                  elevation={0}
                  sx={{
                    background: gradients.success,
                    border: `1px solid ${theme.palette.success.main}40`,
                    borderRadius: 3,
                    p: 2.5,
                    mb: 3,
                    textAlign: 'center',
                    position: 'relative',
                    overflow: 'hidden',
                    ...shimmerEffect
                  }}
                >
                  <Box sx={{ position: 'relative', zIndex: 2 }}>
                    <Box display="flex" alignItems="center" justifyContent="center" gap={1} mb={1}>
                      <TrendingUp color="success" />
                      <Typography variant="body2" color="success.main" fontWeight={700}>
                        Total a Pagar
                      </Typography>
                    </Box>
                    <Typography 
                      variant="h2" 
                      color="success.main" 
                      fontWeight={800}
                      sx={{ 
                        fontFamily: 'monospace',
                        textShadow: `0 2px 4px ${theme.palette.success.main}20`
                      }}
                    >
                      {formatCurrency(calculateTotal())}
                    </Typography>
                    {paymentData.interests > 0 && (
                      <Typography variant="body2" color="success.dark" sx={{ mt: 1, opacity: 0.8 }}>
                        Incluye {formatCurrency(paymentData.interests)} en intereses
                      </Typography>
                    )}
                  </Box>
                </Paper>
              </motion.div>

              {/* Secci√≥n de Comprobante Premium */}
              <motion.div 
                {...animationVariants.slideUp}
                transition={{ delay: 0.3 }}
              >
                <Box mb={4}>
                  <Typography 
                    variant="h6" 
                    fontWeight={700} 
                    mb={2}
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1,
                      color: theme.palette.text.primary
                    }}
                  >
                    <Receipt color="primary" />
                    Comprobante de Pago (opcional)
                  </Typography>
                  
                  <Paper
                    elevation={0}
                    sx={{
                      border: `2px dashed ${theme.palette.primary.main}40`,
                      borderRadius: 3,
                      p: 2.5,
                      textAlign: 'center',
                      background: alpha(theme.palette.primary.main, 0.02),
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        borderColor: theme.palette.primary.main,
                        background: alpha(theme.palette.primary.main, 0.05),
                        transform: 'translateY(-2px)'
                      }
                    }}
                    onClick={() => document.getElementById('receipt-upload').click()}
                  >
                    <AttachFile color="primary" sx={{ fontSize: 32, mb: 1 }} />
                    <Typography variant="body1" color="primary" fontWeight={600}>
                      {paymentData.receiptFile ? paymentData.receiptFile.name : 'Seleccionar Archivo'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
                      Arrastra aqu√≠ tu comprobante o haz clic para seleccionar
                    </Typography>
                    <input
                      id="receipt-upload"
                      type="file"
                      hidden
                      accept="image/*,.pdf"
                      onChange={(e) => handleInputChange('receiptFile', e.target.files[0])}
                    />
                  </Paper>
                </Box>
              </motion.div>
            </DialogContent>

            {/* Footer con Botones Premium */}
            <DialogActions 
              sx={{ 
                p: 4, 
                pt: 2,
                gap: 2,
                background: alpha(theme.palette.background.default, 0.5),
                borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`
              }}
            >
              <motion.div {...animationVariants.slideUp} style={{ flex: 1 }}>
                <Button
                  onClick={handleClose}
                  size="large"
                  sx={{
                    borderRadius: 3,
                    px: 4,
                    py: 1.5,
                    color: theme.palette.text.secondary,
                    border: `2px solid ${theme.palette.divider}`,
                    background: 'transparent',
                    fontWeight: 600,
                    '&:hover': {
                      backgroundColor: alpha(theme.palette.text.primary, 0.04),
                      borderColor: theme.palette.text.secondary,
                      transform: 'translateY(-1px)'
                    }
                  }}
                >
                  Cancelar
                </Button>
              </motion.div>

              <motion.div 
                {...animationVariants.slideUp} 
                transition={{ delay: 0.1 }}
                style={{ flex: 2 }}
              >
                <Button
                  variant="contained"
                  onClick={handleConfirmPayment}
                  disabled={saving}
                  fullWidth
                  size="large"
                  startIcon={saving ? 
                    <CircularProgress size={20} color="inherit" /> : 
                    <CheckCircle />
                  }
                  sx={{
                    py: 1.5,
                    fontSize: '1.1rem',
                    fontWeight: 700,
                    background: theme.palette.success.main,
                    '&:hover': {
                      background: theme.palette.success.dark,
                    }
                  }}
                >
                  {saving ? 'Procesando Pago...' : 'Confirmar Pago'}
                </Button>
              </motion.div>
            </DialogActions>
          </motion.div>
        </Dialog>
      )}
    </AnimatePresence>
  );
};

export default PaymentPopupPremium;
